<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sebest&#39;s Nuage ☁️</title>
    <link>https://sebest.github.io/</link>
    <description>Recent content on Sebest&#39;s Nuage ☁️</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Sat, 24 Oct 2015 15:10:01 +0800</lastBuildDate>
    <atom:link href="https://sebest.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>ProTips: using Gunicorn inside a Docker image</title>
      <link>https://sebest.github.io/post/protips-using-gunicorn-inside-a-docker-image/</link>
      <pubDate>Sat, 24 Oct 2015 15:10:01 +0800</pubDate>
      
      <guid>https://sebest.github.io/post/protips-using-gunicorn-inside-a-docker-image/</guid>
      <description>

&lt;p&gt;In this post i will describe how i use &lt;a href=&#34;http://gunicorn.org/&#34;&gt;Gunicorn&lt;/a&gt; inside Docker. We will specifically see how to configure Gunicorn and how to configure the logger to work nicely with Docker.&lt;/p&gt;

&lt;p&gt;We will use the following Python WSGI app in our examples as &lt;strong&gt;myapp.py&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;logging&lt;/span&gt;

logger &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; logging&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;getLogger(__name__)

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;app&lt;/span&gt;(environ, start_response):
    path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; environ&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;get(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; path &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;/exception&amp;#39;&lt;/span&gt;:
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color: #CC0000; font-weight: bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;My exception!&amp;#39;&lt;/span&gt;)

    data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Request on &lt;/span&gt;&lt;span style=&#34;color: #AA0000&#34;&gt;%s&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; &lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\n&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;%&lt;/span&gt; path
    logger&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;info(data, extra&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;{&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;tags&amp;#39;&lt;/span&gt;: [&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;role:web&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;env:prod&amp;#39;&lt;/span&gt;]})
    start_response(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;200 OK&amp;quot;&lt;/span&gt;, [
          (&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;text/plain&amp;quot;&lt;/span&gt;),
          (&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Content-Length&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;len&lt;/span&gt;(data)))
      ])
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;iter&lt;/span&gt;([data])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The complete source code is available &lt;a href=&#34;https://github.com/sebest-blog/gunicorn-with-docker/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;configuring-gunicorn:dfe07d0fde6b925b72e49a7b67d35d2c&#34;&gt;Configuring Gunicorn&lt;/h2&gt;

&lt;p&gt;The best way to configure a Docker Container is using environment variables, Gunicorn does not natively support this. Gunicorn supports a &lt;a href=&#34;http://docs.gunicorn.org/en/latest/configure.html#configuration-file&#34;&gt;configuration file&lt;/a&gt; that can contain Python code, we will use this feature to be able to pass environment variables to configure it.&lt;/p&gt;

&lt;p&gt;We create a file named &lt;strong&gt;gunicorn.conf&lt;/strong&gt; with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;os&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; k,v &lt;span style=&#34;color: #000000; font-weight: bold&#34;&gt;in&lt;/span&gt; os&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;environ&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;items():
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; k&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;startswith(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;GUNICORN_&amp;quot;&lt;/span&gt;):
        key &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; k&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;split(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;_&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;)[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;]&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;lower()
        &lt;span style=&#34;color: #336666&#34;&gt;locals&lt;/span&gt;()[key] &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; v
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This code will iterate over all environment variables and find those starting by &lt;strong&gt;GUNICORN_&lt;/strong&gt; and set a local variable with the remaining part, lowercased: &lt;strong&gt;GUNICORN_MY_PARAMETER=42&lt;/strong&gt; will create a variable named &lt;strong&gt;my_parameter&lt;/strong&gt; with &amp;lsquo;42&amp;rsquo; as the value.&lt;/p&gt;

&lt;p&gt;We are now able to pass any parameter from this &lt;a href=&#34;http://docs.gunicorn.org/en/latest/settings.html&#34;&gt;list&lt;/a&gt; by prefixing them with GUNICORN_ and uppercasing the parameter name.&lt;/p&gt;

&lt;p&gt;Examples:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The number of Gunicorn workers: GUNICORN_WORKERS=5&lt;/li&gt;
&lt;li&gt;The backlog: GUNICORN_BACKLOG=4096&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can test it by starting Gunicorn like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;GUNICORN_WORKERS&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;2
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;GUNICORN_BACKLOG&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;4096
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;export &lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;GUNICORN_BIND&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;0.0.0.0:8080
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; gunicorn --config gunicorn.conf myapp:app
&lt;span style=&#34;color: #AAAAAA&#34;&gt;[2015-10-29 11:39:34 +0800] [27229] [INFO] Starting gunicorn 19.3.0&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;[2015-10-29 11:39:34 +0800] [27229] [INFO] Listening at: http://0.0.0.0:8080 (27229)&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;[2015-10-29 11:39:34 +0800] [27229] [INFO] Using worker: sync&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;[2015-10-29 11:39:34 +0800] [27232] [INFO] Booting worker with pid: 27232&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;[2015-10-29 11:39:34 +0800] [27233] [INFO] Booting worker with pid: 27233&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;setting-up-logging:dfe07d0fde6b925b72e49a7b67d35d2c&#34;&gt;Setting up logging&lt;/h2&gt;

&lt;p&gt;A common way to setup logging in a Docker base architecture is to output the logs on the standard output and configure the Docker Daemon to forward this to Syslog.&lt;/p&gt;

&lt;p&gt;As Python logs can be multilines, this is especially true for exceptions, it is recommended to use a &lt;strong&gt;JSON&lt;/strong&gt; formatter.&lt;/p&gt;

&lt;p&gt;We will use the &lt;a href=&#34;https://pypi.python.org/pypi/json-logging-py/&#34;&gt;json-logging-py&lt;/a&gt; (&lt;a href=&#34;https://github.com/sebest/json-logging-py&#34;&gt;GitHub&lt;/a&gt;) library as our logging formatter.&lt;/p&gt;

&lt;p&gt;Gunicorn can use a configuration file using the Python logging &lt;a href=&#34;https://docs.python.org/2/library/logging.config.html#logging.config.fileConfig&#34;&gt;fileConfig format&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The following &lt;strong&gt;logging.conf&lt;/strong&gt; file configures the root logger and Gunicorn error logger to output the logs on the standard output using a JSON formatter:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[loggers]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;root, gunicorn.error&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[handlers]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;console&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[formatters]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;json&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[logger_root]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;INFO&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;handlers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;console&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[logger_gunicorn.error]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;level&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;ERROR&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;handlers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;console&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;propagate&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;qualname&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;gunicorn.error&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[handler_console]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;StreamHandler&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;formatter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;json&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;args&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;(sys.stdout, )&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;[formatter_json]&lt;/span&gt;
&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;jsonlogging.JSONFormatter&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can test it by starting Gunicorn like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; gunicorn --log-config logging.conf myapp:app
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note:&lt;/em&gt; I will &amp;lsquo;pretty print&amp;rsquo; the JSON output for readability but the real output is on a single line.&lt;/p&gt;

&lt;p&gt;If we do a request on &lt;strong&gt;&lt;a href=&#34;http://127.0.0.1:8000/path&#34;&gt;http://127.0.0.1:8000/path&lt;/a&gt;&lt;/strong&gt; we have the following output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;silicon.local&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;level&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;myapp&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Request on /path \n&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/Users/sebest/work/blog-demo/gunicorn-with-docker/myapp.py&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;: [
        &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;role:web&amp;quot;&lt;/span&gt;,
        &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;env:prod&amp;quot;&lt;/span&gt;
    ],
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;2015-10-29T03:41:41.589027Z&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s try to request &lt;strong&gt;&lt;a href=&#34;http://127.0.0.1:8000/exception&#34;&gt;http://127.0.0.1:8000/exception&lt;/a&gt;&lt;/strong&gt; to generate an Exception:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;exc_info&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Traceback (most recent call last):\n  File \&amp;quot;/Users/sebest/.virtualenvs/pxlapi/lib/python2.7/site-packages/gunicorn/workers/sync.py\&amp;quot;, line 130, in handle\n    self.handle_request(listener, req, client, addr)\n  File \&amp;quot;/Users/sebest/.virtualenvs/pxlapi/lib/python2.7/site-packages/gunicorn/workers/sync.py\&amp;quot;, line 171, in handle_request\n    respiter = self.wsgi(environ, resp.start_response)\n  File \&amp;quot;/Users/sebest/work/blog-demo/gunicorn-with-docker/myapp.py\&amp;quot;, line 10, in app\n    raise Exception(&amp;#39;My exception!&amp;#39;)\nException: My exception!\n&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;filename&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;glogging.py&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;host&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;silicon.local&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;level&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ERROR&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;lineno&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;228&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;logger&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;gunicorn.error&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Error handling request&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;path&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/Users/sebest/.virtualenvs/pxlapi/lib/python2.7/site-packages/gunicorn/glogging.py&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;tags&amp;quot;&lt;/span&gt;: [],
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;timestamp&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;2015-10-29T03:46:02.349887Z&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can see the Python traceback in the &lt;strong&gt;exec_info&lt;/strong&gt; key of the JSON output:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #99CC66&#34;&gt;Traceback (most recent call last):&lt;/span&gt;
  File &lt;span style=&#34;color: #336666&#34;&gt;&amp;quot;/Users/sebest/.virtualenvs/pxlapi/lib/python2.7/site-packages/gunicorn/workers/sync.py&amp;quot;&lt;/span&gt;, line &lt;span style=&#34;color: #FF6600&#34;&gt;130&lt;/span&gt;, in handle
    &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;handle_request(listener, req, client, addr)
  File &lt;span style=&#34;color: #336666&#34;&gt;&amp;quot;/Users/sebest/.virtualenvs/pxlapi/lib/python2.7/site-packages/gunicorn/workers/sync.py&amp;quot;&lt;/span&gt;, line &lt;span style=&#34;color: #FF6600&#34;&gt;171&lt;/span&gt;, in handle_request
    respiter &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;wsgi(environ, resp&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;start_response)
  File &lt;span style=&#34;color: #336666&#34;&gt;&amp;quot;/Users/sebest/work/blog-demo/gunicorn-with-docker/myapp.py&amp;quot;&lt;/span&gt;, line &lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;, in app
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;raise&lt;/span&gt; &lt;span style=&#34;color: #CC0000; font-weight: bold&#34;&gt;Exception&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;My exception!&amp;#39;&lt;/span&gt;)
&lt;span style=&#34;color: #FF0000&#34;&gt;Exception&lt;/span&gt;: My exception!
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;wrapping-all-of-this-together-in-a-docker-image:dfe07d0fde6b925b72e49a7b67d35d2c&#34;&gt;Wrapping all of this together in a Docker image&lt;/h2&gt;

&lt;p&gt;We use the following Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; python:2.7-slim&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; pip install gunicorn json-logging-py

COPY logging.conf /logging.conf
COPY gunicorn.conf /gunicorn.conf

COPY myapp.py /

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; 8000&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; [&amp;quot;/usr/local/bin/gunicorn&amp;quot;, &amp;quot;--config&amp;quot;, &amp;quot;/gunicorn.conf&amp;quot;, &amp;quot;--log-config&amp;quot;, &amp;quot;/logging.conf&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;:8000&amp;quot;, &amp;quot;myapp:app&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s build it&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker build -t sebestblog/gunicorn-with-docker .
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We can now run the Docker image with some Gunicorn parameters&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker run -e &lt;span style=&#34;color: #003333&#34;&gt;GUNICORN_WORKERS&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;4&lt;/span&gt; -e &lt;span style=&#34;color: #003333&#34;&gt;GUNICORN_ACCESSLOG&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;- -p 8000:8000 sebestblog/gunicorn-with-docker
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The complete source code is available &lt;a href=&#34;https://github.com/sebest-blog/gunicorn-with-docker/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Using Travis.ci to build Docker images</title>
      <link>https://sebest.github.io/post/using-travis-ci-to-build-docker-images/</link>
      <pubDate>Fri, 23 Oct 2015 10:36:48 +0800</pubDate>
      
      <guid>https://sebest.github.io/post/using-travis-ci-to-build-docker-images/</guid>
      <description>

&lt;p&gt;Travis.ci recently released support to use Docker inside the CI pipeline You can read the announcement &lt;a href=&#34;http://blog.travis-ci.com/2015-08-19-using-docker-on-travis-ci/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In this post, I will show you how to use this feature to build Docker images and store them on a Docker registry.&lt;/p&gt;

&lt;p&gt;I&amp;rsquo;ll discuss 2 methods, one using only Docker commands and another using Rocker which I recently discussed about &lt;a href=&#34;https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The complete source code is available &lt;a href=&#34;https://github.com/sebest-blog/using-travis-ci-to-build-docker-images&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;storing-your-docker-registry-credentials-securely:64b13e5a1eef6b4d76cee8a3aa68e952&#34;&gt;Storing your docker registry credentials securely&lt;/h2&gt;

&lt;p&gt;The first step is to store you docker registry credentials in the &lt;strong&gt;.travis.yml&lt;/strong&gt; file. We will store them in some environment variables.&lt;/p&gt;

&lt;p&gt;You can read more about this on Travis.ci website &lt;a href=&#34;http://docs.travis-ci.com/user/environment-variables/#Encrypting-Variables-Using-a-Public-Key&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; travis encrypt &lt;span style=&#34;color: #003333&#34;&gt;DOCKER_EMAIL&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;email@gmail.com
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; travis encrypt &lt;span style=&#34;color: #003333&#34;&gt;DOCKER_USERNAME&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;username
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; travis encrypt &lt;span style=&#34;color: #003333&#34;&gt;DOCKER_PASS&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;password
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And then store the secure version in your &lt;strong&gt;.travis.yml&lt;/strong&gt; file.&lt;/p&gt;

&lt;p&gt;We will add a comment on the line to help us remember which line contains which environment variable.&lt;/p&gt;

&lt;p&gt;We will also add an environment variable containing the 8 first characters of the git commit hash.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;env:
  global:
    - secure: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;UkF2CHX0lUZ...VI/LE=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# DOCKER_EMAIL&lt;/span&gt;
    - secure: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Z3fdBNPt5hR...VI/LE=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# DOCKER_USER&lt;/span&gt;
    - secure: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;F4XbD6WybHC...VI/LE=&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# DOCKER_PASS&lt;/span&gt;
    - COMMIT=${TRAVIS_COMMIT::8}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;creating-and-shipping-the-docker-image:64b13e5a1eef6b4d76cee8a3aa68e952&#34;&gt;Creating and shipping the Docker image&lt;/h2&gt;

&lt;p&gt;In the &lt;strong&gt;after_success&lt;/strong&gt; section of the &lt;strong&gt;.travis.yml&lt;/strong&gt; file, we log on Docker Hub registry, then we build the image.&lt;/p&gt;

&lt;p&gt;We also tag the generated image with:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;the short git commit hash&lt;/li&gt;
&lt;li&gt;the travis build number&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;latest&lt;/strong&gt; if it is the &lt;strong&gt;master&lt;/strong&gt; branch, otherwise the name of the branch&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And finally we push it on the Docker Hub registry&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;after_success:
  - docker login -e $DOCKER_EMAIL -u $DOCKER_USER -p $DOCKER_PASS
  - export REPO=sebestblog/travis-demo
  - export TAG=`if [ &amp;quot;$TRAVIS_BRANCH&amp;quot; == &amp;quot;master&amp;quot; ]; then echo &amp;quot;latest&amp;quot;; else echo $TRAVIS_BRANCH ; fi`
  - docker build -f Dockerfile -t $REPO:$COMMIT .
  - docker tag $REPO:$COMMIT $REPO:$TAG
  - docker tag $REPO:$COMMIT $REPO:travis-$TRAVIS_BUILD_NUMBER
  - docker push $REPO
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The complete source code is available &lt;a href=&#34;https://github.com/sebest-blog/using-travis-ci-to-build-docker-images&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;alternative-solution-using-rocker:64b13e5a1eef6b4d76cee8a3aa68e952&#34;&gt;Alternative solution using Rocker&lt;/h2&gt;

&lt;p&gt;An alternative solution is to use Rocker that we presented in a previous &lt;a href=&#34;https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/&#34;&gt;post&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;after_success:
  - curl -O -L https://github.com/grammarly/rocker/releases/download/0.2.2/rocker-0.2.2_linux_amd64.tar.gz
  - tar xvfz rocker-0.2.2_linux_amd64.tar.gz
  - ./rocker build --auth $DOCKER_USER:$DOCKER_PASS --push -var TRAVIS_BUILD_NUMBER=$TRAVIS_BUILD_NUMBER -var COMMIT=$COMMIT
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using Rocker to build minimal Python Docker images</title>
      <link>https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/</link>
      <pubDate>Tue, 20 Oct 2015 09:38:34 +0800</pubDate>
      
      <guid>https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/grammarly/rocker&#34;&gt;Rocker&lt;/a&gt; is a tool developed by &lt;a href=&#34;http://tech.grammarly.com/blog/posts/Making-Docker-Rock-at-Grammarly.html&#34;&gt;Grammarly&lt;/a&gt; that is offering additional functionalities to build Docker images.&lt;/p&gt;

&lt;p&gt;The syntax of the Rockerfiles is a &lt;strong&gt;superset&lt;/strong&gt; of Dockerfiles.&lt;/p&gt;

&lt;p&gt;Rocker is useful for creating minimal Docker images as you can split the process in 2 steps, the first to build your project in a first container and the second to ship and run. In the following part of this post we will further explain and show how we can use Rocker to easily generate Docker images for Python projects.&lt;/p&gt;

&lt;p&gt;In the first container, we will install all the tools to generate the &lt;a href=&#34;http://pythonwheels.com/&#34;&gt;Python wheels&lt;/a&gt; like a C compiler and all the development headers and libraries. The second container will only hold the installed wheels and dynamic libraries.&lt;/p&gt;

&lt;h1 id=&#34;first-step-the-build-requirements:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;First step: The build requirements&lt;/h1&gt;

&lt;p&gt;If you are already familiar with Dockerfiles, then moving to Rockerfile is really straightforward. The first step is to create a file named &lt;strong&gt;Dockerfile&lt;/strong&gt; at the root of your project.&lt;/p&gt;

&lt;p&gt;You can see the full repository &lt;a href=&#34;https://github.com/sebest-blog/create-a-small-docker-image-for-a-golang-binary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; python:2.7-slim&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The begining of each step is defined by the &lt;strong&gt;FROM&lt;/strong&gt; lines.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; . /src&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;WORKDIR&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; /src&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is pretty standard Dockerfile syntax where we copy the sources of the project into a subfolder of the image.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; apt-get update &lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; apt-get install -y &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
    build-essential
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We install the &lt;strong&gt;build-essential&lt;/strong&gt; package to be able to build Python packages having C dependencies.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;REQUIRE &lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Version&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; sed -ie s/&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;0.0&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;/&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;{{&lt;/span&gt; .Version &lt;span style=&#34;color: #555555&#34;&gt;}}&lt;/span&gt;&lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&amp;#39;&lt;/span&gt;/g setup.py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rocker provides a templating functionality that we use to set the version number of our package. This can be really useful if you use a CI and want to use the build number as the version number.&lt;/p&gt;

&lt;p&gt;Here is an excerpt of our setup.py&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;setup(
    name&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;rockerdemo&amp;#39;&lt;/span&gt;,
    version&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;0.0&amp;#39;&lt;/span&gt;,
    &lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;
)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;To pass the value of &lt;strong&gt;Version&lt;/strong&gt; you will use the &lt;strong&gt;-var&lt;/strong&gt; parameter&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; rocker build -var &lt;span style=&#34;color: #003333&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;1.0
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Rocker provides the &lt;strong&gt;-print&lt;/strong&gt; parameter to visualize the Rockerfile after it has been templated.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; python setup.py bdist_wheel
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; pip wheel .
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; pip wheel setproctitle gunicorn json-logging-py
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We build all the wheels that we will need: our main app, its dependencies and the dependencies that we will need to actually run the container like &lt;strong&gt;gunicorn&lt;/strong&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;EXPORT /src/wheelhouse
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;All the wheels are stored in &lt;strong&gt;/src/wheelhouse&lt;/strong&gt;, so we &lt;strong&gt;EXPORT&lt;/strong&gt; this folder to be able to &lt;strong&gt;IMPORT&lt;/strong&gt; it in the next step.&lt;/p&gt;

&lt;h1 id=&#34;second-step-the-container-that-we-will-ship-and-run:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;Second step: The container that we will ship and run&lt;/h1&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; python:2.7-slim&lt;/span&gt;

IMPORT /wheelhouse

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; pip install --no-index --find-links&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;file:///wheelhouse rockerdemo setproctitle gunicorn json-logging-py

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;RUN&lt;/span&gt; rm -rf /wheelhouse
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We &lt;strong&gt;IMPORT&lt;/strong&gt; the wheels, install them and remove the &lt;strong&gt;/wheelhouse&lt;/strong&gt; folder.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;COPY docker/logging.conf /logging.conf

COPY docker/gunicorn.conf /gunicorn.conf

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;EXPOSE&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; 8000&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ENTRYPOINT&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; [&amp;quot;/usr/local/bin/gunicorn&amp;quot;, &amp;#39;--name&amp;quot;, &amp;quot;rockerdemo&amp;quot;, &amp;quot;--config&amp;quot;, &amp;quot;/gunicorn.conf&amp;quot;, &amp;quot;--log-config&amp;quot;, &amp;quot;/loggin\&lt;/span&gt;
g.conf&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;-b&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;:8000&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;, &amp;quot;&lt;/span&gt;rockerdemo:app&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This part is pretty standard Dockerfile syntax.&lt;/p&gt;

&lt;h1 id=&#34;building-tagging-and-pushing-the-container:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;Building, tagging and pushing the container&lt;/h1&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;PUSH sebest/rocker-with-python-project:&lt;span style=&#34;color: #555555&#34;&gt;{{&lt;/span&gt; .Version &lt;span style=&#34;color: #555555&#34;&gt;}}&lt;/span&gt;
PUSH sebest/rocker-with-python-project:latest
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This part will tag the build and optionaly push it to the Docker registry if you use the &lt;strong&gt;-push&lt;/strong&gt; parameter&lt;/p&gt;

&lt;p&gt;The final step is to actually build the image and push it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; rocker build -var &lt;span style=&#34;color: #003333&#34;&gt;Version&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;1.2 -push
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Create a small Docker image for a GoLang binary</title>
      <link>https://sebest.github.io/post/create-a-small-docker-image-for-a-golang-binary/</link>
      <pubDate>Wed, 07 Oct 2015 12:16:42 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/create-a-small-docker-image-for-a-golang-binary/</guid>
      <description>&lt;p&gt;A benefit with using GoLang is the ease in deploying to production as it does not require dependencies.&lt;/p&gt;

&lt;p&gt;The official Docker images for GoLang are large (typically 500MB+). The reason why they are large is because they contain all the toolchain to build a GoLang program. However you don&amp;rsquo;t need any of this to actually run it as it is a static binary.&lt;/p&gt;

&lt;p&gt;In this post we will see how to generate a small Docker image weighing less than 8MB.&lt;/p&gt;

&lt;p&gt;All files mentioned in this post are available &lt;a href=&#34;https://github.com/sebest-blog/create-a-small-docker-image-for-a-golang-binary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with a basic Go program:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;package&lt;/span&gt; main

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; (
        &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;fmt&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;net/http&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;time&amp;quot;&lt;/span&gt;
)

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;func&lt;/span&gt; main() {
        now &lt;span style=&#34;color: #555555&#34;&gt;:=&lt;/span&gt; time.Now()
        tz, _ &lt;span style=&#34;color: #555555&#34;&gt;:=&lt;/span&gt; time.LoadLocation(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Europe/Paris&amp;quot;&lt;/span&gt;)
        parisTime &lt;span style=&#34;color: #555555&#34;&gt;:=&lt;/span&gt; now.In(tz)
        fmt.Printf(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Local time: %s\nParis time: %s\n&amp;quot;&lt;/span&gt;, now, parisTime)

        _, err &lt;span style=&#34;color: #555555&#34;&gt;:=&lt;/span&gt; http.Get(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;https://golang.org/&amp;quot;&lt;/span&gt;)
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; err &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;nil&lt;/span&gt; {
                fmt.Println(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;GoLang website is UP&amp;quot;&lt;/span&gt;)
        } &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;else&lt;/span&gt; {
                fmt.Printf(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;GoLang website is DOWN\nErr: %s\n&amp;quot;&lt;/span&gt;, err.Error())
        }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Note: This post is written under OSX.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s compile our binary and check its size.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; go build main.go
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; ls -lh main
&lt;span style=&#34;color: #AAAAAA&#34;&gt;-rwxr-xr-x  1 sebest  staff   6,3M  7 oct 13:38 main&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The binary is 6.3 MB.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s create a Docker image using the following Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; scratch&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; main /&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; [&amp;quot;/main&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Building the image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker build -t demo .
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Sending build context to Docker daemon  6.57 MB&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Step 0 : FROM scratch&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt; ---&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Step 1 : ADD main /&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt; ---&amp;gt; 52f8caa90021&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Removing intermediate container f4b041cde0f6&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Step 2 : CMD /main&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt; ---&amp;gt; Running in b82368bb2f0a&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt; ---&amp;gt; c625c39ac16e&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Removing intermediate container b82368bb2f0a&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Successfully built c625c39ac16e&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s try to run this image:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker run demo
&lt;span style=&#34;color: #AAAAAA&#34;&gt;exec format error&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Error response from daemon: Cannot start container cda57701734998a80a1637e59db64e0737b4cc17d29041f9318b89a29d1af7f3: [8] System error: exec format error&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We got an error: [8] System error: exec format error&lt;/p&gt;

&lt;p&gt;The reason is that this binary is an OSX binary and not a Linux binary:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; file main
&lt;span style=&#34;color: #AAAAAA&#34;&gt;main: Mach-O 64-bit executable x86_64&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So let&amp;rsquo;s cross-compile our Go program to a Linux binary.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;CGO_ENABLED&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;GOOS&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;linux &lt;span style=&#34;color: #003333&#34;&gt;GOARCH&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;amd64 go build main.go
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; file main
&lt;span style=&#34;color: #AAAAAA&#34;&gt;main: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have a Linux binary, so let&amp;rsquo;s rebuild our Docker image and run it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker run demo
&lt;span style=&#34;color: #AAAAAA&#34;&gt;panic: time: missing Location in call to Time.In&lt;/span&gt;

&lt;span style=&#34;color: #AAAAAA&#34;&gt;goroutine 1 [running]:&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;time.Time.In(0xecda77bef, 0x3d1be4, 0x8732e0, 0x0, 0x0, 0x0, 0x0)&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;	/usr/local/Cellar/go/1.5.1/libexec/src/time/time.go:803 +0x85&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;main.main()&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;	/Users/sebest/work/blog-demo/demo-build-static-golang-binary-and-docker-image/main.go:12 +0x97&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We now have a different error. The reason is because the scratch image does not have any zoneinfo for timezones. Let&amp;rsquo;s copy the zoneinfo folder from OSX.&lt;/p&gt;

&lt;p&gt;As the scratch image does not contain anything, we don&amp;rsquo;t even have access to mkdir. The workaround here is to create a tar.gz image and use the ADD directive in the Dockerfile.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; tar cfz zoneinfo.tar.gz /usr/share/zoneinfo
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Updated Dockerfile:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;FROM&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; scratch&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; zoneinfo.tar.gz /&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;ADD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; main /&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;CMD&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt; [&amp;quot;/main&amp;quot;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s rebuild and try our new Docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker build -t demo .
&lt;span style=&#34;color: #AAAAAA&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; docker run demo
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Local time: 2015-10-07 20:57:48.686910468 +0000 UTC&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Paris time: 2015-10-07 22:57:48.686910468 +0200 CEST&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;GoLang website is DOWN&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Err: Get https://golang.org/: x509: failed to load system roots and no roots provided&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So now the zoneinfo issue is fixed but we still have an error when doing a HTTPS request. The reason is because the scratch image does not have any SSL CA certificates.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s download the Certificates from &lt;a href=&#34;http://curl.haxx.se/docs/caextract.html&#34;&gt;http://curl.haxx.se/docs/caextract.html&lt;/a&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;curl -o ca-certificates.crt https://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s fix that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;FROM scratch
ADD zoneinfo.tar.gz /
ADD ca-certificates.crt /etc/ssl/certs/
ADD main /
CMD [&amp;quot;/main&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Let&amp;rsquo;s try with this new Docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;docker build -t demo .
...
&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;docker run demo
Local &lt;span style=&#34;color: #336666&#34;&gt;time&lt;/span&gt;: 2015-10-07 21:08:49.834033002 +0000 UTC
Paris &lt;span style=&#34;color: #336666&#34;&gt;time&lt;/span&gt;: 2015-10-07 23:08:49.834033002 +0200 CEST
GoLang website is UP
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Everything works fine now so let&amp;rsquo;s check the size of the Docker image&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;docker images
REPOSITORY                TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
demo                      latest              dfa7313cd338        &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt; minutes ago       7.075 MB
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see,  our binary is 6.3MB and the Docker image is less than 7.1MB!&lt;/p&gt;

&lt;p&gt;The source code for all of this is available &lt;a href=&#34;https://github.com/sebest-blog/create-a-small-docker-image-for-a-golang-binary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ProTips: converting markdown to restructuredtext</title>
      <link>https://sebest.github.io/post/protips-converting-markdown-to-restructuredtext/</link>
      <pubDate>Mon, 05 Oct 2015 10:48:50 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/protips-converting-markdown-to-restructuredtext/</guid>
      <description>&lt;p&gt;A quick one-liner, which I recently used to convert a Markdown formatted README to reStructuredText, suitable for posting to PyPI:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; pandoc --from&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;markdown --to&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;rst --output&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;README.rst README.md
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>ProTips: dealing with unix timestamp from the shell</title>
      <link>https://sebest.github.io/post/protips-dealing-with-unix-timestamp-from-the-shell/</link>
      <pubDate>Sat, 03 Oct 2015 00:53:54 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/protips-dealing-with-unix-timestamp-from-the-shell/</guid>
      <description>

&lt;h2 id=&#34;get-the-current-unix-timestamp:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Get the current UNIX timestamp&lt;/h2&gt;

&lt;p&gt;Eg: Tue Sep 22 23:34:33 UTC 2015&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date +%s
&lt;span style=&#34;color: #AAAAAA&#34;&gt;1442964873&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;get-the-unix-timestamp-of-a-specific-date:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Get the UNIX timestamp of a specific date.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; use this pattern [[[mm]dd]HH]MM[[cc]yy][.ss]]&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date -ju 092223342015.33 +%s
&lt;span style=&#34;color: #AAAAAA&#34;&gt;1442964873&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;-j&lt;/em&gt; : do not set the date&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-u&lt;/em&gt; : input date is UTC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; use this pattern mm/dd/ccyy HH:MM:ss&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date -d &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;09/22/2015 23:34:33&amp;quot;&lt;/span&gt; +%s
&lt;span style=&#34;color: #AAAAAA&#34;&gt;1442964873&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;convert-unix-timestamp-to-human-readable-format:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Convert Unix timestamp to Human readable format&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; for local timezone&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date -r 1442964873
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Tue Sep 22 16:34:33 PDT 2015&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; in UTC&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date -ur 1442964873
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Tue Sep 22 23:34:33 UTC 2015&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; in UTC&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; date -d @1442964873
&lt;span style=&#34;color: #AAAAAA&#34;&gt;Tue Sep 22 23:34:33 UTC 2015&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>A quick md5sum equivalent in python.</title>
      <link>https://sebest.github.io/post/a-quick-md5sum-equivalent-in-python/</link>
      <pubDate>Sat, 29 May 2010 00:18:38 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/a-quick-md5sum-equivalent-in-python/</guid>
      <description>&lt;p&gt;This post will show you how to write a function to compute md5 sum of a file using the &lt;b&gt;hashlib module&lt;/b&gt;, the &lt;b&gt;with statement&lt;/b&gt; and being memory efficient by not reading the whole file in memory.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;__future__&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; with_statement
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;hashlib&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; md5

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;md5sum&lt;/span&gt;(filename, buf_size&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;8192&lt;/span&gt;):
    m &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; md5()
    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# the with statement makes sure the file will be closed&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;open&lt;/span&gt;(filename, &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;b&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; f:
        &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# We read the file in small chunk until EOF&lt;/span&gt;
        data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read(buf_size)
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;while&lt;/span&gt; data:
            &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# We had data to the md5 hash&lt;/span&gt;
            m&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;update(data)
            data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; f&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read(buf_size)
    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# We return the md5 hash in hexadecimal format&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; m&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;hexdigest()

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; __name__ &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;sys&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; md5sum(sys&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;])
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now let&amp;rsquo;s see how quick it is against the real md5sum using a test file of 10Go!&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The real md5sum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;time &lt;/span&gt;md5sum /data/testfile
&lt;span style=&#34;color: #AAAAAA&#34;&gt;b215f7bf5b09fa3e9848a6a66f3f3172  /data/testfile&lt;/span&gt;

&lt;span style=&#34;color: #AAAAAA&#34;&gt;real    0m31.148s&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;user    0m27.738s&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;sys     0m3.408s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The python version of md5sum:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;time &lt;/span&gt;python md5sum.py /data/testfile
&lt;span style=&#34;color: #AAAAAA&#34;&gt;b215f7bf5b09fa3e9848a6a66f3f3172&lt;/span&gt;

&lt;span style=&#34;color: #AAAAAA&#34;&gt;real    0m27.791s&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;user    0m24.514s&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;sys     0m3.276s&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The python based version is almost 4 seconds quicker than the C based version!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux: How to bind IP that doesn&#39;t exist (yet).</title>
      <link>https://sebest.github.io/post/linux-how-to-bind-ip-that-doesn-t-exist-yet/</link>
      <pubDate>Tue, 25 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/linux-how-to-bind-ip-that-doesn-t-exist-yet/</guid>
      <description>&lt;p&gt;This tip is really usefull if you use virtual ips.&lt;/p&gt;

&lt;p&gt;Imagine you are using keepalived + haproxy on your loadbalancers in active/active mode.&lt;/p&gt;

&lt;p&gt;You have 2 virtual IPs one is on the first load balancer and the other is on the second.&lt;/p&gt;

&lt;p&gt;Now in your haproxy.cfg you have to bind these IPs, the probem is that one of the virtual IPs is not on the current loadbalancer, so haproxy will refuse to start with the following error: &lt;i&gt;Starting proxy appli1-rewrite: cannot bind socket&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The common solution is to listen on &lt;i&gt;0.0.0.0&lt;/i&gt;, but it not always practical on wanted, especially if you want to have another server using the same port but on another ip, or if you only want to listen on internal interfaces.&lt;/p&gt;

&lt;p&gt;The solution is a &lt;strong&gt;sysctl&lt;/strong&gt; that will allow any software to bind an IP even if it&amp;rsquo;s not up yet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;sysctl -w net.ipv4.ip_nonlocal_bind=1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should put this in &lt;strong&gt;/etc/sysctl.conf&lt;/strong&gt; to make this change permanent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to easily package python softwares for ubuntu</title>
      <link>https://sebest.github.io/post/how-to-easily-package-python-softwares-for-ubuntu/</link>
      <pubDate>Mon, 24 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/how-to-easily-package-python-softwares-for-ubuntu/</guid>
      <description>&lt;p&gt;This post will show you how to quickly package any python software for debian or ubuntu.&lt;/p&gt;

&lt;p&gt;The magic comes from &lt;a href=&#34;http://github.com/astraw/stdeb&#34;&gt;stdeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to install it:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; sudo apt-get install python-stdeb
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;stdeb can download, package and install any python software hosted on &lt;a href=&#34;http://pypi.python.org/pypi&#34;&gt;PyPi&lt;/a&gt; using the &lt;b&gt;pypi-install&lt;/b&gt; command. It works almost like easy_install or pip.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; pypi-install Werkzeug
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can check that the package is installed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; dpkg -l | grep werkzeug
&lt;span style=&#34;color: #AAAAAA&#34;&gt;ii  python-werkzeug    0.6.2-1    The Swiss Army knife of Python web developme&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you want more control on the buildprocess and access the debian source package, you must follow theses steps:&lt;br?&gt;
First you must find and download the archive of the software you want to package:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;#&lt;/span&gt; http://pypi.python.org/pypi/Jinja2/2.4.1
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; wget http://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.4.1.tar.gz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we will create the debian source package with &lt;b&gt;py2dsc&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; py2dsc Jinja2-2.4.1.tar.gz
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The source package is in the &lt;b&gt;deb_dist&lt;/b&gt; folder.
If you want to build the binary package with debuild:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;cd &lt;/span&gt;deb_dist/jinja2-2.4.1/
&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; debuild
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You now have &lt;b&gt;python-jinja2_2.4.1-1_all.deb&lt;/b&gt; in deb_dist!
Happy packaging ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Http server using python</title>
      <link>https://sebest.github.io/post/simple-http-server-using-python/</link>
      <pubDate>Sat, 01 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/simple-http-server-using-python/</guid>
      <description>&lt;p&gt;Here is a quick tips to easily serve static files.
The only requirement is to have python 2.5+.&lt;/p&gt;

&lt;p&gt;The first thing to do is to go in the directory you want to share, this is the directory that would be apache DocumentRoot.&lt;/p&gt;

&lt;p&gt;Then issue the following command and you are done:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #003333&#34;&gt;$ &lt;/span&gt;python -m SimpleHTTPServer
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can optionnaly give a port number after &lt;b&gt;SimpleHTTPServer&lt;/b&gt;, the default port number is 8000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting the root password in preseed.cfg for unattended installation</title>
      <link>https://sebest.github.io/post/setting-the-root-password-in-preseed-cfg-for-unattended-installation/</link>
      <pubDate>Wed, 31 Mar 2010 00:06:13 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/setting-the-root-password-in-preseed-cfg-for-unattended-installation/</guid>
      <description>&lt;p&gt;Following my previous post about automatic installations of ubuntu karmic, here is a quick tips to set the root password automatically.&lt;br/&gt;
Edit your &lt;b&gt;preseed.cfg&lt;/b&gt;&lt;br/&gt;
The &lt;b&gt;unsafe&lt;/b&gt; solution:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# Root password, either in clear text
d-i passwd/root-password password r00tme
d-i passwd/root-password-again password r00tme
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;b&gt;safe&lt;/b&gt; solution:&lt;br/&gt;
You need the &lt;b&gt;mkpasswd&lt;/b&gt; util from the whois package&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;apt-get install whois
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then you can generate you secure password and put the returned value in your preseed.cfg.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# printf &amp;quot;r00tme&amp;quot; | mkpasswd -s -m md5
$1$CHp7HkQW$Z2ZTY5cZMurbwbqU1zaS.1
&lt;/pre&gt;&lt;/div&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# or encrypted using an MD5 hash.
d-i passwd/root-password-crypted password $1$CHp7HkQW$Z2ZTY5cZMurbwbqU1zaS.1
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Ip failover with keepalived using a Bcfg2/Genshi template</title>
      <link>https://sebest.github.io/post/ip-failover-with-keepalived-using-a-bcfg2-genshi-template/</link>
      <pubDate>Tue, 30 Mar 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/ip-failover-with-keepalived-using-a-bcfg2-genshi-template/</guid>
      <description>&lt;p&gt;Following my previous post about &lt;a href=&#34;http://www.pytips.com/2010/3/16/ip-failover-with-ucarp-on-ubuntu&#34;&gt;Ip failover with Ucarp&lt;/a&gt;, i decided to use Keepalived instead of Ucarp as it is easier to setup and integrate.
Keepalived implemented the &lt;a href=&#34;http://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol&#34;&gt;Vrrp&lt;/a&gt; protocol instead of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Address_Redundancy_Protocol&#34;&gt;Carp&lt;/a&gt; protocol. Carp is a patent free implementation of the ideas behind Vrrp.&lt;/p&gt;

&lt;p&gt;To generate the keepalived config file i used &lt;a href=&#34;http://www.pytips.com/2010/3/19/using-genshi-templating-with-bcfg2&#34;&gt;TGenshi&lt;/a&gt; template and the bcfg2 &lt;a href=&#34;http://trac.mcs.anl.gov/projects/bcfg2/wiki/Plugins/Properties&#34;&gt;Properties&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;This plugin allows you to define your custom XML config file and then use its content in your template.&lt;/p&gt;

&lt;p&gt;Here is my &lt;b&gt;/etc/bcfg2/Properties/vips.xml&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;vips&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;group&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;vip&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;iface=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;eth0&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;vid=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;10&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ip=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;10.201.4.101&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;netmask=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;16&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;broadcast=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;10.201.255.255&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;password=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;mypass1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-02&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/vip&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;vip&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;iface=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;vlan501&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;vid=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;11&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ip=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;42.42.121.111&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;netmask&amp;quot;26&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;broadcast=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;42.42.121.127&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;password=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;mypass2&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-02&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/vip&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;vip&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;iface=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;vlan501&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;vid=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;12&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ip=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;42.42.121.112&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;netmask=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;26&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;broadcast=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;42.42.121.127&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;password=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;mypass3&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-01&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;no&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;host&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;axel-02&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;master=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;yes&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/vip&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/group&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/vips&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the template &lt;b&gt;/etc/bcfg2/TGenshi/keepalived/keepalived.conf/template.newtxt&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;{% python
vips = []

try:
    hostname = list(metadata.aliases)[0].split(&amp;#39;.&amp;#39;,1)[0]
    for vip_info in metadata.Properties[&amp;#39;vips.xml&amp;#39;].data.find(&amp;quot;.//group[@name=&amp;#39;%s&amp;#39;]&amp;quot; % (hostname.split(&amp;#39;-&amp;#39;)[0])):
        vip = vip_info.attrib
        print vip
        for host_info in vip_info:
            if host_info.attrib[&amp;#39;name&amp;#39;] == hostname:
               vip.update({&amp;#39;state&amp;#39; : host_info.attrib[&amp;#39;master&amp;#39;] == &amp;#39;yes&amp;#39; and &amp;#39;MASTER&amp;#39; or &amp;#39;BACKUP&amp;#39; })
               vips.append(vip)
except:
    pass
%}\
# &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;hostname&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;

{% for index, vip in enumerate(vips) %}\
vrrp_instance VI_&lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;index&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt; {
    state &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;state&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;
    interface &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;iface&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;
    virtual_router_id &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;vid&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;
    priority 100
    authentication {
        auth_type PASS
        auth_pass &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;password&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;
    }

    virtual_ipaddress {
        &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;ip&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;/&lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;netmask&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt; brd &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;broadcast&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt; dev &lt;span style=&#34;color: #009999&#34;&gt;${&lt;/span&gt;vip[&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;iface&amp;#39;&lt;/span&gt;]&lt;span style=&#34;color: #009999&#34;&gt;}&lt;/span&gt;
    }
}
{% end %}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate this kind of config file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;# axel-01

vrrp_instance VI_0 {
    state MASTER
    interface eth0
    virtual_router_id 10
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass1
    }

    virtual_ipaddress {
        10.201.4.101/16 brd 10.201.255.255 dev eth0
    }
}
vrrp_instance VI_1 {
    state MASTER
    interface vlan501
    virtual_router_id 11
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass2
    }

    virtual_ipaddress {
        42.42.121.111/26 brd 42.42.121.127 dev vlan501
    }
}
vrrp_instance VI_2 {
    state BACKUP
    interface vlan501
    virtual_router_id 12
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass3
    }

    virtual_ipaddress {
        42.42.121.112/26 brd 42.42.121.127 dev vlan501
    }
}
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Automatic Installation of Ubuntu Karmic</title>
      <link>https://sebest.github.io/post/automatic-installation-of-ubuntu-karmic/</link>
      <pubDate>Mon, 29 Mar 2010 00:16:33 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/automatic-installation-of-ubuntu-karmic/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ll show you how to setup a PXE/netboot server and use the preseed feature of Debian Installer to automatically install your Ubuntu server.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The workflow of the netboor process is:
&lt;ul&gt;
&lt;li&gt;Your client boot with the network interface in PXE mode&lt;/li&gt;
&lt;li&gt;The network interface issue a DHCP request&lt;/li&gt;
&lt;li&gt;The DHCP server gives it an IP and also the filename of the PXE bootloader (pxelinux.0)&lt;/li&gt;
&lt;li&gt;The network interface download the PXE bootloader throught tftp&lt;/li&gt;
&lt;li&gt;The PXE bootloader boot and try to download it&amp;rsquo;s config file (defaults to pxelinux.cfg/default)
&lt;li&gt;The config file tells pxelinux to download the linux kernel and its initrd&lt;/li&gt;
&lt;li&gt;The linux kernel boots and start the install&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;The first step is to install and configure a tftp server to transfer all files (pxelinux, pxelinux config file, linux kernel and initrd)&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;apt-get install tftpd-hpa
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we edit the config file: &lt;b&gt;/etc/default/tftpd-hpa&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;RUN_DAEMON=&amp;quot;yes&amp;quot;
OPTIONS=&amp;quot;-4 -l -v -s /var/lib/tftpboot&amp;quot;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now start your tftp server &lt;b&gt;/etc/init.d/tftpd-hpa start&lt;/b&gt;. Make sure that the directory defined in the config file exists and that the server is properly running.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The second step is to setup a DHCP server, we&amp;rsquo;ll use dnsmasq as it is really easy to setup:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;apt-get install dnsmasq
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Then we edit the config file: &lt;b&gt;/etc/dnsmasq.conf&lt;/b&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;dhcp-host=08:00:27:3B:0A:E2,192.168.42.42

dhcp-boot=pxelinux.0
dhcp-range=192.168.42.5,192.168.42.99,12h
dhcp-option=3,192.168.42.1
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You should make sure that the ip (192.168.42.X) range match the ip of your network interface.&lt;br/&gt;
The &lt;b&gt;dhcp-host&lt;/b&gt; directive is used to assign a static ip address to a specific mac address.&lt;/p&gt;

&lt;p&gt;The third step is to fetch the necessary files from &lt;b&gt;&lt;a href=&#34;http://archive.ubuntu.com/ubuntu/dists/karmic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/&#34;&gt;http://archive.ubuntu.com/ubuntu/dists/karmic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/&lt;/a&gt;&lt;/b&gt; (you can change the architecture and Ubuntu release).&lt;/p&gt;

&lt;p&gt;You need to put the following files in &lt;b&gt;/var/lib/tftpboot&lt;/b&gt;: pxelinux.0, linux and initrd.gz .&lt;br/&gt;
In the tftpboot directory, create a folder &lt;b&gt;pxelinux.cfg&lt;/b&gt;&lt;br/&gt;
In this directory, you can either create a file named from the mac address of the client (eg: 01-08-00-27-3b-0a-e2) or you can name it &lt;b&gt;default&lt;/b&gt; but it&amp;rsquo;s quite dangerous as it would match any host and would reinstall it upon reboot.&lt;br/&gt;
The content of the file should be (don&amp;rsquo;t forget to restart dnsmasq after the modification to the configuration file):&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;default server

label server
kernel linux
append initrd=initrd.gz auto url=http://192.168.42.1/preseed.cfg vga=normal debian-installer/locale=en_US console-setup/layoutcode=fr netcfg/choose_interface=eth0 netcfg/get_hostname=
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now the last step is to install any webserver to serve the file &lt;/b&gt;preseed.cfg&lt;/b&gt; references in the previous file, this file will contain all the answers to debian installer questions, so it should be fully automatic.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;d-i mirror/country string manual
d-i mirror/http/hostname string us.archive.ubuntu.com
d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string

d-i time/zone string Europe/Paris

d-i clock-setup/utc boolean true

d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string regular
d-i partman-auto/device_remove_lvm boolean true

d-i partman-auto/expert_recipe string                         \
      boot-root ::                                            \
              40 50 100 ext3                                  \
                      $primary{ } $bootable{ }                \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext3 }    \
                      mountpoint{ /boot }                     \
              .                                               \
              500 10000 1000000000 ext4                       \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext4 }    \
                      mountpoint{ / }                         \
              .                                               \
              64 512 300% linux-swap                          \
                      method{ swap } format{ }                \
              .

#d-i partman-auto/choose_recipe select boot-root

d-i partman-basicmethods/method_only boolean false
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select Finish partitioning and write changes to disk
d-i partman/confirm boolean true

d-i passwd/root-login boolean true
d-i passwd/make-user boolean false

d-i passwd/root-password password sebest
d-i passwd/root-password-again password sebest
d-i user-setup/allow-password-weak boolean true

d-i pkgsel/update-policy select none
d-i pkgsel/install-language-support boolean false

d-i tasksel/force-tasks string server
d-i tasksel/first multiselect OpenSSH server

d-i debian-installer/allow_unauthenticated string true

d-i grub-installer/with_other_os boolean true

d-i finish-install/reboot_in_progress note
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If you more informations about this file you can read the following &lt;a href=&#34;https://help.ubuntu.com/9.10/installation-guide/i386/appendix-preseed.html&#34;&gt;page&lt;/a&gt;. And use &lt;a href=&#34;http://d-i.alioth.debian.org/svn/debian-installer/installer/doc/devel/partman-auto-recipe.txt&#34;&gt;this page&lt;/a&gt; for infos about partionning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IP failover with Ucarp on Ubuntu</title>
      <link>https://sebest.github.io/post/ip-failover-with-ucarp-on-ubuntu/</link>
      <pubDate>Tue, 16 Mar 2010 00:09:33 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/ip-failover-with-ucarp-on-ubuntu/</guid>
      <description>&lt;p&gt;Ucarp is an implementation of Common Address Redundancy Protocol (CARP) allowing failover of a single Virtual IP (VIP) for high availability.&lt;/p&gt;

&lt;p&gt;In order to install ucarp:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;apt-get install ucarp
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can find more about ubuntu&amp;rsquo;s integration of ucarp in &lt;strong&gt;/usr/share/doc/ucarp/README.Debian&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll now modify &lt;strong&gt;/etc/network/interfaces&lt;/strong&gt; to add our virtual IP: 10.200.0.200:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; cat /etc/network/interfaces
&lt;span style=&#34;color: #AAAAAA&#34;&gt;auto eth0&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;iface eth0 inet static&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        address 10.200.0.102&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        netmask 255.255.255.0&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-vid 3&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-vip 10.200.0.200&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-password ourpassword&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-advskew 10&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-advbase 1&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;        ucarp-master yes&lt;/span&gt;

&lt;span style=&#34;color: #AAAAAA&#34;&gt;iface eth0:ucarp inet static&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;      address 10.200.0.200&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;      netmask 255.255.255.255&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;You can now restart your network:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;/etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And you can check that your virtual IP is there:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span style=&#34;color: #000099; font-weight: bold&#34;&gt;$&lt;/span&gt; ip a show dev eth0
&lt;span style=&#34;color: #AAAAAA&#34;&gt;2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;    link/ether 00:26:b9:f9:48:d0 brd ff:ff:ff:ff:ff:ff&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;    inet 10.200.0.102/24 brd 10.200.0.255 scope global eth0&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;    inet 10.200.0.200/32 brd 10.255.255.255 scope global eth0:ucarp&lt;/span&gt;
&lt;span style=&#34;color: #AAAAAA&#34;&gt;       valid_lft forever preferred_lft forever&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;On your second server you can do the exact same steps, except that you can set &lt;strong&gt;ucarp-master&lt;/strong&gt; to &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After you have restart the network on the second server the virtual IP won&amp;rsquo;t be there, you can try rebooting the first server and check that the virtual IP appears on the second server.&lt;/p&gt;

&lt;p&gt;In the mean time you can ping the virtual IP to check that the failover works properly.&lt;/p&gt;

&lt;p&gt;When the first server will be up again, the virtual IP will go back to this server as it is the master.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>