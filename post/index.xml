<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on ☁️  Sebest&#39;s Nuage ☁️</title>
    <link>https://sebest.github.io/post/</link>
    <description>Recent content in Posts on ☁️  Sebest&#39;s Nuage ☁️</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Tue, 20 Oct 2015 09:38:34 +0800</lastBuildDate>
    <atom:link href="https://sebest.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Using Rocker to build minimal Python Docker images</title>
      <link>https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/</link>
      <pubDate>Tue, 20 Oct 2015 09:38:34 +0800</pubDate>
      
      <guid>https://sebest.github.io/post/using-rocker-to-build-minimal-python-docker-images/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;https://github.com/grammarly/rocker&#34;&gt;Rocker&lt;/a&gt; is a tool developed by &lt;a href=&#34;http://tech.grammarly.com/blog/posts/Making-Docker-Rock-at-Grammarly.html&#34;&gt;Grammarly&lt;/a&gt; that is offering additional functionalities to build Docker images.&lt;/p&gt;

&lt;p&gt;The syntax of the Rockerfiles is a superset of Dockerfiles.&lt;/p&gt;

&lt;p&gt;Rocker is useful for creating minimal/small Docker images as you can split the process in 2 steps, the first to build your project in a first container and the second to ship and run. In the following part of this post we will further explain and show how we can use Rocker to easily generate Docker images for Python projects.&lt;/p&gt;

&lt;p&gt;In the first container, we will install all the tools to generate the &lt;a href=&#34;http://pythonwheels.com/&#34;&gt;Python wheels&lt;/a&gt; like a C compiler and all the development headers and libraries. The second container will only hold the installed wheels and dynamic libraries.&lt;/p&gt;

&lt;h1 id=&#34;first-step-the-build-requirements:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;First step: The build requirements&lt;/h1&gt;

&lt;p&gt;If you are already familiar with Dockerfiles, then moving to Rockerfile is really straightforward. The first step is to create a file named &lt;strong&gt;Dockerfile&lt;/strong&gt; at the root of your project.&lt;/p&gt;

&lt;p&gt;You can see the full repository &lt;a href=&#34;https://github.com/sebest/sebest-hugo-demo/tree/master/rocker-with-python-project&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM python:2.7-slim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The begining of each step is defined by the &lt;strong&gt;FROM&lt;/strong&gt; lines.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ADD . /src
WORKDIR /src
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is pretty standard Dockerfile syntax where we copy the sources of the project into a subfolder of the image.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN apt-get update &amp;amp;&amp;amp; apt-get install -y \
    build-essential
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We install the &lt;strong&gt;build-essential&lt;/strong&gt; package to be able to build Python packages having C dependencies.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;REQUIRE [&amp;quot;Version&amp;quot;]
RUN sed -ie s/\&#39;0.0\&#39;/\&#39;{{ .Version }}\&#39;/g setup.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rocker provides a templating functionality that we use to set the version number of our package. This can be really useful if you use a CI and want to use the build number as the version number.&lt;/p&gt;

&lt;p&gt;Here is an excerpt of our setup.py&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;setup(
    name=&#39;rockerdemo&#39;,
    version=&#39;0.0&#39;,
    ...
)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To pass the value of &lt;strong&gt;Version&lt;/strong&gt; you will use the &lt;strong&gt;-var&lt;/strong&gt; parameter&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rocker build -var Version=1.0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Rocker provides the &lt;strong&gt;-print&lt;/strong&gt; parameter to visualize the Rockerfile after it has been templated.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN python setup.py bdist_wheel
RUN pip wheel .
RUN pip wheel setproctitle gunicorn json-logging-py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We build all the wheels that we will need: our main app, its dependencies and the dependencies that we will need to actually run the container like &lt;strong&gt;gunicorn&lt;/strong&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;EXPORT /src/wheelhouse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;All the wheels are stored in &lt;strong&gt;/src/wheelhouse&lt;/strong&gt;, so we &lt;strong&gt;EXPORT&lt;/strong&gt; this folder to be able to &lt;strong&gt;IMPORT&lt;/strong&gt; it in the next step.&lt;/p&gt;

&lt;h1 id=&#34;second-step-the-container-that-we-will-ship-and-run:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;Second step: The container that we will ship and run&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;FROM python:2.7-slim

IMPORT /wheelhouse

RUN pip install --no-index --find-links=file:///wheelhouse rockerdemo setproctitle gunicorn json-logging-py

RUN rm -rf /wheelhouse
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We &lt;strong&gt;IMPORT&lt;/strong&gt; the wheels, install them and remove the &lt;strong&gt;/wheelhouse&lt;/strong&gt; folder.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;COPY docker/logging.conf /logging.conf

COPY docker/gunicorn.conf /gunicorn.conf

EXPOSE 8000

ENTRYPOINT [&amp;quot;/usr/local/bin/gunicorn&amp;quot;, &#39;--name&amp;quot;, &amp;quot;rockerdemo&amp;quot;, &amp;quot;--config&amp;quot;, &amp;quot;/gunicorn.conf&amp;quot;, &amp;quot;--log-config&amp;quot;, &amp;quot;/loggin\
g.conf&amp;quot;, &amp;quot;-b&amp;quot;, &amp;quot;:8000&amp;quot;, &amp;quot;rockerdemo:app&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part is pretty standard Dockerfile syntax.&lt;/p&gt;

&lt;h1 id=&#34;building-tagging-and-pushing-the-container:3973c3ec19897e2b10e699a49fe418cc&#34;&gt;Building, tagging and pushing the container&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;PUSH sebest/rocker-with-python-project:{{ .Version }}
PUSH sebest/rocker-with-python-project:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This part will tag the build and optionaly push it to the Docker registry if you use the &lt;strong&gt;-push&lt;/strong&gt; parameter&lt;/p&gt;

&lt;p&gt;The final step is to actually build the image and push it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rocker build -var Version=1.2 -push
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Create a small Docker image for a GoLang binary</title>
      <link>https://sebest.github.io/post/create-a-small-docker-image-for-a-golang-binary/</link>
      <pubDate>Wed, 07 Oct 2015 12:16:42 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/create-a-small-docker-image-for-a-golang-binary/</guid>
      <description>&lt;p&gt;A benefit with using GoLang is the ease in deploying to production as it does not require dependencies.&lt;/p&gt;

&lt;p&gt;The official Docker images for GoLang are large (typically 500MB+). The reason why they are large is because they contains all the toolchain to build a GoLang program. However you don&amp;rsquo;t need any of this to actually run it as it is a static binary.&lt;/p&gt;

&lt;p&gt;In this post we will see how to generate a small Docker image weighing less than 8MB.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s start with a basic Go program:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;package main

import (
        &amp;quot;fmt&amp;quot;
        &amp;quot;net/http&amp;quot;
        &amp;quot;time&amp;quot;
)

func main() {
        now := time.Now()
        tz, _ := time.LoadLocation(&amp;quot;Europe/Paris&amp;quot;)
        parisTime := now.In(tz)
        fmt.Printf(&amp;quot;Local time: %s\nParis time: %s\n&amp;quot;, now, parisTime)

        _, err := http.Get(&amp;quot;https://golang.org/&amp;quot;)
        if err == nil {
                fmt.Println(&amp;quot;GoLang website is UP&amp;quot;)
        } else {
                fmt.Printf(&amp;quot;GoLang website is DOWN\nErr: %s\n&amp;quot;, err.Error())
        }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;em&gt;Note: This post is written under OSX.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s compile our binary and check its size.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go build main.go
$ ls -lh main
-rwxr-xr-x  1 sebest  staff   6,3M  7 oct 13:38 main
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The binary is 6.3 MB.&lt;/p&gt;

&lt;p&gt;Now let&amp;rsquo;s create a Docker image using the following Dockerfile:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM scratch
ADD main /
CMD [&amp;quot;/main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t demo .
Sending build context to Docker daemon  6.57 MB
Step 0 : FROM scratch
 ---&amp;gt;
Step 1 : ADD main /
 ---&amp;gt; 52f8caa90021
Removing intermediate container f4b041cde0f6
Step 2 : CMD /main
 ---&amp;gt; Running in b82368bb2f0a
 ---&amp;gt; c625c39ac16e
Removing intermediate container b82368bb2f0a
Successfully built c625c39ac16e
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s try to run this image:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run demo
exec format error
Error response from daemon: Cannot start container cda57701734998a80a1637e59db64e0737b4cc17d29041f9318b89a29d1af7f3: [8] System error: exec format error
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We got an error: [8] System error: exec format error&lt;/p&gt;

&lt;p&gt;The reason is that this binary is an OSX binary and not a Linux binary:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ file main
main: Mach-O 64-bit executable x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So let&amp;rsquo;s cross-compile our Go program to a Linux binary.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build main.go
$ file main
main: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), statically linked, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a Linux binary, so let&amp;rsquo;s rebuild our Docker image and run it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run demo
panic: time: missing Location in call to Time.In

goroutine 1 [running]:
time.Time.In(0xecda77bef, 0x3d1be4, 0x8732e0, 0x0, 0x0, 0x0, 0x0)
	/usr/local/Cellar/go/1.5.1/libexec/src/time/time.go:803 +0x85
main.main()
	/Users/sebest/work/blog-demo/demo-build-static-golang-binary-and-docker-image/main.go:12 +0x97
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We now have a different error, the reason is that the scratch image does not have any zoneinfo for timezones, let&amp;rsquo;s copy the zoneinfo folder from OsX.&lt;/p&gt;

&lt;p&gt;As the scratch image does not contain anything we don&amp;rsquo;t even have access to mkdir, the workaround is to create a tar.gz image and use the ADD directive in the Dockerfile.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tar cfz zoneinfo.tar.gz /usr/share/zoneinfo
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;FROM scratch
ADD zoneinfo.tar.gz /
ADD main /
CMD [&amp;quot;/main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s rebuild and try our new Docker image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t demo .
...
$ docker run demo
Local time: 2015-10-07 20:57:48.686910468 +0000 UTC
Paris time: 2015-10-07 22:57:48.686910468 +0200 CEST
GoLang website is DOWN
Err: Get https://golang.org/: x509: failed to load system roots and no roots provided
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So now the zoneinfo issue is fixed but we still have an error when doing a HTTPS request, the reason is that the scratch image does not have any SSL CA certificates.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s download the Certificates from &lt;a href=&#34;http://curl.haxx.se/docs/caextract.html&#34;&gt;http://curl.haxx.se/docs/caextract.html&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -o ca-certificates.crt https://raw.githubusercontent.com/bagder/ca-bundle/master/ca-bundle.crt
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s fix that:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM scratch
ADD zoneinfo.tar.gz /
ADD ca-certificates.crt /etc/ssl/certs/
ADD main /
CMD [&amp;quot;/main&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try with this new Docker image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker build -t demo .
...
$ docker run demo
Local time: 2015-10-07 21:08:49.834033002 +0000 UTC
Paris time: 2015-10-07 23:08:49.834033002 +0200 CEST
GoLang website is UP
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Everything works fine now, let&amp;rsquo;s check the size of the Docker image&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker images
REPOSITORY                TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
demo                      latest              dfa7313cd338        3 minutes ago       7.075 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So our binary is 6.3MB and the Docker image is less than 7.1MB!&lt;/p&gt;

&lt;p&gt;The source code for all of this is available &lt;a href=&#34;https://github.com/sebest/sebest-hugo-demo/tree/master/create-a-small-docker-image-for-a-golang-binary&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>ProTips: converting markdown to restructuredtext</title>
      <link>https://sebest.github.io/post/protips-converting-markdown-to-restructuredtext/</link>
      <pubDate>Mon, 05 Oct 2015 10:48:50 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/protips-converting-markdown-to-restructuredtext/</guid>
      <description>&lt;p&gt;A quick one-liner, which I recently used to convert a Markdown formatted README to reStructuredText, suitable for posting to PyPI:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pandoc --from=markdown --to=rst --output=README.rst README.md
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>ProTips: dealing with unix timestamp from the shell</title>
      <link>https://sebest.github.io/post/protips-dealing-with-unix-timestamp-from-the-shell/</link>
      <pubDate>Sat, 03 Oct 2015 00:53:54 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/protips-dealing-with-unix-timestamp-from-the-shell/</guid>
      <description>

&lt;h2 id=&#34;get-the-current-unix-timestamp:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Get the current UNIX timestamp&lt;/h2&gt;

&lt;p&gt;Eg: Tue Sep 22 23:34:33 UTC 2015&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date +%s
1442964873
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;get-the-unix-timestamp-of-a-specific-date:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Get the UNIX timestamp of a specific date.&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; use this pattern [[[mm]dd]HH]MM[[cc]yy][.ss]]&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date -ju 092223342015.33 +%s
1442964873
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;&lt;em&gt;-j&lt;/em&gt; : do not set the date&lt;/li&gt;
&lt;li&gt;&lt;em&gt;-u&lt;/em&gt; : input date is UTC&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; use this pattern mm/dd/ccyy HH:MM:ss&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date -d &amp;quot;09/22/2015 23:34:33&amp;quot; +%s
1442964873
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;convert-unix-timestamp-to-human-readable-format:b07beac5cf000e882e3d2de8efb60ff8&#34;&gt;Convert Unix timestamp to Human readable format&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; for local timezone&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date -r 1442964873
Tue Sep 22 16:34:33 PDT 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;OSX&lt;/strong&gt; in UTC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ date -ur 1442964873
Tue Sep 22 23:34:33 UTC 2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;Linux&lt;/strong&gt; in UTC&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;date -d @1442964873
Tue Sep 22 23:34:33 UTC 2015
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>A quick md5sum equivalent in python.</title>
      <link>https://sebest.github.io/post/a-quick-md5sum-equivalent-in-python/</link>
      <pubDate>Sat, 29 May 2010 00:18:38 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/a-quick-md5sum-equivalent-in-python/</guid>
      <description>&lt;p&gt;This post will show you how to write a function to compute md5 sum of a file using the &lt;b&gt;hashlib module&lt;/b&gt;, the &lt;b&gt;with statement&lt;/b&gt; and being memory efficient by not reading the whole file in memory.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;from __future__ import with_statement
from hashlib import md5

def md5sum(filename, buf_size=8192):
    m = md5()
    # the with statement makes sure the file will be closed
    with open(filename, &#39;b&#39;) as f:
        # We read the file in small chunk until EOF
        data = f.read(buf_size)
        while data:
            # We had data to the md5 hash
            m.update(data)
            data = f.read(buf_size)
    # We return the md5 hash in hexadecimal format
    return m.hexdigest()

if __name__ == &#39;__main__&#39;:
    import sys
    print md5sum(sys.argv[1])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now let&amp;rsquo;s see how quick it is against the real md5sum using a test file of 10Go!&lt;br/&gt;
The real md5sum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# time md5sum /data/testfile
b215f7bf5b09fa3e9848a6a66f3f3172  /data/testfile

real    0m31.148s
user    0m27.738s
sys     0m3.408s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The python version of md5sum:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# time python md5sum.py /data/testfile
b215f7bf5b09fa3e9848a6a66f3f3172

real    0m27.791s
user    0m24.514s
sys     0m3.276s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The python based version is almost 4 seconds quicker than the C based version!&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Linux: How to bind IP that doesn&#39;t exist (yet).</title>
      <link>https://sebest.github.io/post/linux-how-to-bind-ip-that-doesn-t-exist-yet/</link>
      <pubDate>Tue, 25 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/linux-how-to-bind-ip-that-doesn-t-exist-yet/</guid>
      <description>&lt;p&gt;This tip is really usefull if you use virtual ips.&lt;/p&gt;

&lt;p&gt;Imagine you are using keepalived + haproxy on your loadbalancers in active/active mode.&lt;/p&gt;

&lt;p&gt;You have 2 vips one is on the first load balancerm the other on the second. Now in your haproxy.cfg you have to bind these ips, the probem is that one of the vips is not on the current loadbalancer, so haproxy will refuse to start with the following error: &lt;i&gt;Starting proxy appli1-rewrite: cannot bind socket&lt;/i&gt;.&lt;/p&gt;

&lt;p&gt;The common solution is to listen on &lt;i&gt;0.0.0.0&lt;/i&gt;, but it not always practical on wanted, especially if you want to have another server using the same port but on another ip, or if you only want to listen on internal interfaces.&lt;/p&gt;

&lt;p&gt;The solution is a sysctl, that will allow any software to bind any ip even if it&amp;rsquo;s not up yet:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sysctl -w net.ipv4.ip_nonlocal_bind=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should put this in &lt;strong&gt;/etc/sysctl.conf&lt;/strong&gt; to make it permanent.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How to easily package python softwares for ubuntu</title>
      <link>https://sebest.github.io/post/how-to-easily-package-python-softwares-for-ubuntu/</link>
      <pubDate>Mon, 24 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/how-to-easily-package-python-softwares-for-ubuntu/</guid>
      <description>&lt;p&gt;This post will show you how to quickly package any python software for debian or ubuntu.&lt;/p&gt;

&lt;p&gt;The magic comes from &lt;a href=&#34;http://github.com/astraw/stdeb&#34;&gt;stdeb&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;The first step is to install it:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python-stdeb
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;stdeb can download, package and install any python software hosted on &lt;a href=&#34;http://pypi.python.org/pypi&#34;&gt;PyPi&lt;/a&gt; using the &lt;b&gt;pypi-install&lt;/b&gt; command. It works almost like easy_install or pip.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pypi-install Werkzeug
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can check that the package is installed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ dpkg -l | grep werkzeug
ii  python-werkzeug    0.6.2-1    The Swiss Army knife of Python web developme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you want more control on the buildprocess and access the debian source package, you must follow theses steps:&lt;br?&gt;
First you must find and download the archive of the software you want to package:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# http://pypi.python.org/pypi/Jinja2/2.4.1
wget http://pypi.python.org/packages/source/J/Jinja2/Jinja2-2.4.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now we will create the debian source package with &lt;b&gt;py2dsc&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;py2dsc Jinja2-2.4.1.tar.gz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The source package is in the &lt;b&gt;deb_dist&lt;/b&gt; folder.
If you want to build the binary package with debuild:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd deb_dist/jinja2-2.4.1/
debuild
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You now have &lt;b&gt;python-jinja2_2.4.1-1_all.deb&lt;/b&gt; in deb_dist!
Happy packaging ;)&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Simple Http server using python</title>
      <link>https://sebest.github.io/post/simple-http-server-using-python/</link>
      <pubDate>Sat, 01 May 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/simple-http-server-using-python/</guid>
      <description>&lt;p&gt;Here is a quick tips to easily serve static files.
The only requirement is to have python 2.5+.&lt;/p&gt;

&lt;p&gt;The first thing to do is to go in the directory you want to share, this is the directory that would be apache DocumentRoot.&lt;/p&gt;

&lt;p&gt;Then issue the following command and you are done:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ python -m SimpleHTTPServer
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can optionnaly give a port number after &lt;b&gt;SimpleHTTPServer&lt;/b&gt;, the default port number is 8000&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Setting the root password in preseed.cfg for unattended installation</title>
      <link>https://sebest.github.io/post/setting-the-root-password-in-preseed-cfg-for-unattended-installation/</link>
      <pubDate>Wed, 31 Mar 2010 00:06:13 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/setting-the-root-password-in-preseed-cfg-for-unattended-installation/</guid>
      <description>&lt;p&gt;Following my previous post about automatic installations of ubuntu karmic, here is a quick tips to set the root password automatically.&lt;br/&gt;
Edit your &lt;b&gt;preseed.cfg&lt;/b&gt;&lt;br/&gt;
The &lt;b&gt;unsafe&lt;/b&gt; solution:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Root password, either in clear text
d-i passwd/root-password password r00tme
d-i passwd/root-password-again password r00tme
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;b&gt;safe&lt;/b&gt; solution:&lt;br/&gt;
You need the &lt;b&gt;mkpasswd&lt;/b&gt; util from the whois package&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install whois
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then you can generate you secure password and put the returned value in your preseed.cfg.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# printf &amp;quot;r00tme&amp;quot; | mkpasswd -s -m md5
$1$CHp7HkQW$Z2ZTY5cZMurbwbqU1zaS.1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# or encrypted using an MD5 hash.
d-i passwd/root-password-crypted password $1$CHp7HkQW$Z2ZTY5cZMurbwbqU1zaS.1
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Ip failover with keepalived using a Bcfg2/Genshi template</title>
      <link>https://sebest.github.io/post/ip-failover-with-keepalived-using-a-bcfg2-genshi-template/</link>
      <pubDate>Tue, 30 Mar 2010 00:00:00 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/ip-failover-with-keepalived-using-a-bcfg2-genshi-template/</guid>
      <description>&lt;p&gt;Following my previous post about &lt;a href=&#34;http://www.pytips.com/2010/3/16/ip-failover-with-ucarp-on-ubuntu&#34;&gt;Ip failover with Ucarp&lt;/a&gt;, i decided to use Keepalived instead of Ucarp as it is easier to setup and integrate.
Keepalived implemented the &lt;a href=&#34;http://en.wikipedia.org/wiki/Virtual_Router_Redundancy_Protocol&#34;&gt;Vrrp&lt;/a&gt; protocol instead of the &lt;a href=&#34;http://en.wikipedia.org/wiki/Common_Address_Redundancy_Protocol&#34;&gt;Carp&lt;/a&gt; protocol. Carp is a patent free implementation of the ideas behind Vrrp.&lt;/p&gt;

&lt;p&gt;To generate the keepalived config file i used &lt;a href=&#34;http://www.pytips.com/2010/3/19/using-genshi-templating-with-bcfg2&#34;&gt;TGenshi&lt;/a&gt; template and the bcfg2 &lt;a href=&#34;http://trac.mcs.anl.gov/projects/bcfg2/wiki/Plugins/Properties&#34;&gt;Properties&lt;/a&gt; plugin.&lt;/p&gt;

&lt;p&gt;This plugin allows you to define your custom XML config file and then use its content in your template.&lt;/p&gt;

&lt;p&gt;Here is my &lt;b&gt;/etc/bcfg2/Properties/vips.xml&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;vips&amp;gt;
  &amp;lt;group name=&amp;quot;axel&amp;quot;&amp;gt;
    &amp;lt;vip iface=&amp;quot;eth0&amp;quot; vid=&amp;quot;10&amp;quot; ip=&amp;quot;10.201.4.101&amp;quot; netmask=&amp;quot;16&amp;quot; broadcast=&amp;quot;10.201.255.255&amp;quot; password=&amp;quot;mypass1&amp;quot;&amp;gt;
      &amp;lt;host name=&amp;quot;axel-01&amp;quot; master=&amp;quot;yes&amp;quot;/&amp;gt;
      &amp;lt;host name=&amp;quot;axel-02&amp;quot; master=&amp;quot;no&amp;quot;/&amp;gt;
    &amp;lt;/vip&amp;gt;
    &amp;lt;vip iface=&amp;quot;vlan501&amp;quot; vid=&amp;quot;11&amp;quot; ip=&amp;quot;42.42.121.111&amp;quot; netmask&amp;quot;26&amp;quot; broadcast=&amp;quot;42.42.121.127&amp;quot; password=&amp;quot;mypass2&amp;quot;&amp;gt;
      &amp;lt;host name=&amp;quot;axel-01&amp;quot; master=&amp;quot;yes&amp;quot;/&amp;gt;
      &amp;lt;host name=&amp;quot;axel-02&amp;quot; master=&amp;quot;no&amp;quot;/&amp;gt;
    &amp;lt;/vip&amp;gt;
    &amp;lt;vip iface=&amp;quot;vlan501&amp;quot; vid=&amp;quot;12&amp;quot; ip=&amp;quot;42.42.121.112&amp;quot; netmask=&amp;quot;26&amp;quot; broadcast=&amp;quot;42.42.121.127&amp;quot; password=&amp;quot;mypass3&amp;quot;&amp;gt;
      &amp;lt;host name=&amp;quot;axel-01&amp;quot; master=&amp;quot;no&amp;quot;/&amp;gt;
      &amp;lt;host name=&amp;quot;axel-02&amp;quot; master=&amp;quot;yes&amp;quot;/&amp;gt;
    &amp;lt;/vip&amp;gt;
  &amp;lt;/group&amp;gt;
&amp;lt;/vips&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the template &lt;b&gt;/etc/bcfg2/TGenshi/keepalived/keepalived.conf/template.newtxt&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% python
vips = []

try:
    hostname = list(metadata.aliases)[0].split(&#39;.&#39;,1)[0]
    for vip_info in metadata.Properties[&#39;vips.xml&#39;].data.find(&amp;quot;.//group[@name=&#39;%s&#39;]&amp;quot; % (hostname.split(&#39;-&#39;)[0])):
        vip = vip_info.attrib
        print vip
        for host_info in vip_info:
            if host_info.attrib[&#39;name&#39;] == hostname:
               vip.update({&#39;state&#39; : host_info.attrib[&#39;master&#39;] == &#39;yes&#39; and &#39;MASTER&#39; or &#39;BACKUP&#39; })
               vips.append(vip)
except:
    pass
%}\
# ${hostname}

{% for index, vip in enumerate(vips) %}\
vrrp_instance VI_${index} {
    state ${vip[&#39;state&#39;]}
    interface ${vip[&#39;iface&#39;]}
    virtual_router_id ${vip[&#39;vid&#39;]}
    priority 100
    authentication {
        auth_type PASS
        auth_pass ${vip[&#39;password&#39;]}
    }

    virtual_ipaddress {
        ${vip[&#39;ip&#39;]}/${vip[&#39;netmask&#39;]} brd ${vip[&#39;broadcast&#39;]} dev ${vip[&#39;iface&#39;]}
    }
}
{% end %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will generate this kind of config file:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# axel-01

vrrp_instance VI_0 {
    state MASTER
    interface eth0
    virtual_router_id 10
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass1
    }

    virtual_ipaddress {
        10.201.4.101/16 brd 10.201.255.255 dev eth0
    }
}
vrrp_instance VI_1 {
    state MASTER
    interface vlan501
    virtual_router_id 11
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass2
    }

    virtual_ipaddress {
        42.42.121.111/26 brd 42.42.121.127 dev vlan501
    }
}
vrrp_instance VI_2 {
    state BACKUP
    interface vlan501
    virtual_router_id 12
    priority 100
    authentication {
        auth_type PASS
        auth_pass mypass3
    }

    virtual_ipaddress {
        42.42.121.112/26 brd 42.42.121.127 dev vlan501
    }
}
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Automatic Installation of Ubuntu Karmic</title>
      <link>https://sebest.github.io/post/automatic-installation-of-ubuntu-karmic/</link>
      <pubDate>Mon, 29 Mar 2010 00:16:33 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/automatic-installation-of-ubuntu-karmic/</guid>
      <description>&lt;p&gt;I&amp;rsquo;ll show you how to setup a PXE/netboot server and use the preseed feature of Debian Installer to automatically install your Ubuntu server.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The workflow of the netboor process is:
&lt;ul&gt;
&lt;li&gt;Your client boot with the network interface in PXE mode&lt;/li&gt;
&lt;li&gt;The network interface issue a DHCP request&lt;/li&gt;
&lt;li&gt;The DHCP server gives it an IP and also the filename of the PXE bootloader (pxelinux.0)&lt;/li&gt;
&lt;li&gt;The network interface download the PXE bootloader throught tftp&lt;/li&gt;
&lt;li&gt;The PXE bootloader boot and try to download it&amp;rsquo;s config file (defaults to pxelinux.cfg/default)
&lt;li&gt;The config file tells pxelinux to download the linux kernel and its initrd&lt;/li&gt;
&lt;li&gt;The linux kernel boots and start the install&lt;/li&gt;
&lt;/ul&gt;&lt;/p&gt;

&lt;p&gt;The first step is to install and configure a tftp server to transfer all files (pxelinux, pxelinux config file, linux kernel and initrd)&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install tftpd-hpa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we edit the config file: &lt;b&gt;/etc/default/tftpd-hpa&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;RUN_DAEMON=&amp;quot;yes&amp;quot;
OPTIONS=&amp;quot;-4 -l -v -s /var/lib/tftpboot&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now start your tftp server &lt;b&gt;/etc/init.d/tftpd-hpa start&lt;/b&gt;. Make sure that the directory defined in the config file exists and that the server is properly running.&lt;br/&gt;&lt;/p&gt;

&lt;p&gt;The second step is to setup a DHCP server, we&amp;rsquo;ll use dnsmasq as it is really easy to setup:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install dnsmasq
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then we edit the config file: &lt;b&gt;/etc/dnsmasq.conf&lt;/b&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;dhcp-host=08:00:27:3B:0A:E2,192.168.42.42

dhcp-boot=pxelinux.0
dhcp-range=192.168.42.5,192.168.42.99,12h
dhcp-option=3,192.168.42.1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You should make sure that the ip (192.168.42.X) range match the ip of your network interface.&lt;br/&gt;
The &lt;b&gt;dhcp-host&lt;/b&gt; directive is used to assign a static ip address to a specific mac address.&lt;/p&gt;

&lt;p&gt;The third step is to fetch the necessary files from &lt;b&gt;&lt;a href=&#34;http://archive.ubuntu.com/ubuntu/dists/karmic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/&#34;&gt;http://archive.ubuntu.com/ubuntu/dists/karmic/main/installer-amd64/current/images/netboot/ubuntu-installer/amd64/&lt;/a&gt;&lt;/b&gt; (you can change the architecture and Ubuntu release).&lt;/p&gt;

&lt;p&gt;You need to put the following files in &lt;b&gt;/var/lib/tftpboot&lt;/b&gt;: pxelinux.0, linux and initrd.gz .&lt;br/&gt;
In the tftpboot directory, create a folder &lt;b&gt;pxelinux.cfg&lt;/b&gt;&lt;br/&gt;
In this directory, you can either create a file named from the mac address of the client (eg: 01-08-00-27-3b-0a-e2) or you can name it &lt;b&gt;default&lt;/b&gt; but it&amp;rsquo;s quite dangerous as it would match any host and would reinstall it upon reboot.&lt;br/&gt;
The content of the file should be (don&amp;rsquo;t forget to restart dnsmasq after the modification to the configuration file):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;default server

label server
kernel linux
append initrd=initrd.gz auto url=http://192.168.42.1/preseed.cfg vga=normal debian-installer/locale=en_US console-setup/layoutcode=fr netcfg/choose_interface=eth0 netcfg/get_hostname=

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now the last step is to install any webserver to serve the file &lt;/b&gt;preseed.cfg&lt;/b&gt; references in the previous file, this file will contain all the answers to debian installer questions, so it should be fully automatic.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;d-i mirror/country string manual
d-i mirror/http/hostname string us.archive.ubuntu.com
d-i mirror/http/directory string /ubuntu
d-i mirror/http/proxy string

d-i time/zone string Europe/Paris

d-i clock-setup/utc boolean true

d-i partman-auto/disk string /dev/sda
d-i partman-auto/method string regular
d-i partman-auto/device_remove_lvm boolean true

d-i partman-auto/expert_recipe string                         \
      boot-root ::                                            \
              40 50 100 ext3                                  \
                      $primary{ } $bootable{ }                \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext3 }    \
                      mountpoint{ /boot }                     \
              .                                               \
              500 10000 1000000000 ext4                       \
                      method{ format } format{ }              \
                      use_filesystem{ } filesystem{ ext4 }    \
                      mountpoint{ / }                         \
              .                                               \
              64 512 300% linux-swap                          \
                      method{ swap } format{ }                \
              .

#d-i partman-auto/choose_recipe select boot-root

d-i partman-basicmethods/method_only boolean false
d-i partman/confirm_write_new_label boolean true
d-i partman/choose_partition select Finish partitioning and write changes to disk
d-i partman/confirm boolean true

d-i passwd/root-login boolean true
d-i passwd/make-user boolean false

d-i passwd/root-password password sebest
d-i passwd/root-password-again password sebest
d-i user-setup/allow-password-weak boolean true

d-i pkgsel/update-policy select none
d-i pkgsel/install-language-support boolean false

d-i tasksel/force-tasks string server
d-i tasksel/first multiselect OpenSSH server

d-i debian-installer/allow_unauthenticated string true

d-i grub-installer/with_other_os boolean true

d-i finish-install/reboot_in_progress note
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If you more informations about this file you can read the following &lt;a href=&#34;https://help.ubuntu.com/9.10/installation-guide/i386/appendix-preseed.html&#34;&gt;page&lt;/a&gt;. And use &lt;a href=&#34;http://d-i.alioth.debian.org/svn/debian-installer/installer/doc/devel/partman-auto-recipe.txt&#34;&gt;this page&lt;/a&gt; for infos about partionning.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IP failover with Ucarp on Ubuntu</title>
      <link>https://sebest.github.io/post/ip-failover-with-ucarp-on-ubuntu/</link>
      <pubDate>Tue, 16 Mar 2010 00:09:33 -0700</pubDate>
      
      <guid>https://sebest.github.io/post/ip-failover-with-ucarp-on-ubuntu/</guid>
      <description>&lt;p&gt;Ucarp is an implementation of Common Address Redundancy Protocol (CARP) allowing failover of a single Virtual IP (VIP) for high availability.&lt;/p&gt;

&lt;p&gt;In order to install ucarp:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apt-get install ucarp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can find more about ubuntu&amp;rsquo;s integration of ucarp in &lt;strong&gt;/usr/share/doc/ucarp/README.Debian&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We&amp;rsquo;ll now modify &lt;strong&gt;/etc/network/interfaces&lt;/strong&gt; to add our virtual IP: 10.200.0.200:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# /etc/network/interfaces
auto eth0
iface eth0 inet static
        address 10.200.0.102
        netmask 255.255.255.0
        ucarp-vid 3
        ucarp-vip 10.200.0.200
        ucarp-password ourpassword
        ucarp-advskew 10
        ucarp-advbase 1
        ucarp-master yes

iface eth0:ucarp inet static
      address 10.200.0.200
      netmask 255.255.255.255
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;You can now restart your network:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/init.d/networking restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;And you can check that your virtual IP is there:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# ip a show dev eth0
2: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:26:b9:f9:48:d0 brd ff:ff:ff:ff:ff:ff
    inet 10.200.0.102/24 brd 10.200.0.255 scope global eth0
    inet 10.200.0.200/32 brd 10.255.255.255 scope global eth0:ucarp
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;On your second server you can do the exact same steps, except that you can set &lt;strong&gt;ucarp-master&lt;/strong&gt; to &lt;strong&gt;no&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;After you have restart the network on the second server the virtual IP won&amp;rsquo;t be there, you can try rebooting the first server and check that the virtual IP appears on the second server.&lt;/p&gt;

&lt;p&gt;In the mean time you can ping the virtual IP to check that the failover works properly.&lt;/p&gt;

&lt;p&gt;When the first server will be up again, the virtual IP will go back to this server as it is the master.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>